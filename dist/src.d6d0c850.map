{"version":3,"sources":["constants.js","components/background.js","components/snake.js","state/index.js","components/food.js","index.js"],"names":["CONSTANTS","BG_COLOR","SNAKE_COLOR","SNAKE_START","x","y","FOOD_COLOR","SPEED","KEY_MAP","key","direction","background","refresh","context","color","width","height","clearRect","fillStyle","fillRect","snake","parts","isOppositeDirection","newDirection","setDirection","move","justAte","unshift","pop","draw","forEach","part","isDead","find","val","index","isEating","currentX","currentY","state","game","inProgress","food","isDropped","drop","getRandomPosition","max","Math","round","random","wasEaten","eaten","battleGround","document","getElementById","getContext","getDirection","keycode","keyPress","e","keyCode","startGame","addEventListener","newGame","setInterval","endGame","alert","clearInterval"],"mappings":"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","file":"src.d6d0c850.map","sourceRoot":"../src","sourcesContent":["const CONSTANTS = {\n  BG_COLOR: 'white',\n  SNAKE_COLOR: 'blue',\n  SNAKE_START: [\n    { x: 30, y: 200 },\n    { x: 20, y: 200 },\n    { x: 10, y: 200 }\n  ],\n  FOOD_COLOR: 'green',\n  SPEED: 100,\n  KEY_MAP: [\n    {key: 37, direction: 'left'},\n    {key: 38, direction: 'up'},\n    {key: 40, direction: 'down'},\n    {key: 39, direction: 'right'}\n  ]\n}\n\nexport default CONSTANTS","const background = {\n  refresh (context, color, { width, height }) {\n    context.clearRect(0, 0, width, height)\n    context.fillStyle = color\n    context.fillRect(0, 0, width, height)\n  }\n}\n\nexport default background","const snake = {\n  parts:[],\n  direction: 'right',\n\n  isOppositeDirection (newDirection) {\n    switch (newDirection) {\n      case 'up': return this.direction === 'down'\n      case 'down': return this.direction === 'up'\n      case 'right': return this.direction === 'left'\n      case 'left': return this.direction === 'right'\n    }\n  },\n\n  setDirection (newDirection) {\n    if (this.isOppositeDirection(newDirection)) { return false } \n    this.direction = newDirection\n  },\n\n  move (justAte) {\n    switch (this.direction) {\n      case 'up':\n        this.parts.unshift({\n          x: this.parts[0].x,\n          y: this.parts[0].y - 10\n        })\n        break\n      case 'right':\n        this.parts.unshift({\n          x: this.parts[0].x + 10,\n          y: this.parts[0].y\n        })\n        break\n      case 'down':\n        this.parts.unshift({\n          x: this.parts[0].x,\n          y: this.parts[0].y + 10\n        })\n        break\n      case 'left':\n        this.parts.unshift({\n          x: this.parts[0].x - 10,\n          y: this.parts[0].y\n        })\n      break\n    }\n    \n    if (!justAte) { this.parts.pop() }\n  },\n\n  draw (context, color) {\n    context.fillStyle = color\n    this.parts.forEach(part => context.fillRect(part.x, part.y, 10, 10))\n  },\n\n  isDead ({ width, height }) {\n    if (\n      this.parts[0].x >= width ||\n      this.parts[0].y >= height ||\n      this.parts[0].x < 0 ||\n      this.parts[0].y < 0) {\n        return true\n      }\n    return this.parts.find((val, index) => {\n      if (index !== 0) {\n        return val.x === this.parts[0].x && val.y === this.parts[0].y\n      } else {\n        return false\n      }\n    })\n  },\n\n  isEating ({ currentX, currentY}) {\n    if (currentX === this.parts[0].x && currentY === this.parts[0].y ) { return true }\n    return false\n  }\n}\n\nexport default snake","const state = {\n  game: {\n    inProgress: false\n  }\n}\n\nexport default state","const food = {\n  isDropped: false,\n  currentX: 0,\n  currentY: 0,\n\n  drop ({ width, height }) {\n    this.currentX = this.getRandomPosition(height)\n    this.currentY = this.getRandomPosition(width)\n    this.isDropped = true\n  },\n\n  draw (context, color) {\n    context.fillStyle = color\n    context.fillRect(this.currentX, this.currentY, 10, 10)\n  },\n\n  getRandomPosition (max) {\n    return Math.round(Math.random() * (max / 10) + 0) * 10\n  },\n\n  wasEaten (eaten) {\n    this.isDropped = !eaten\n  }\n}\n\nexport default food","import 'bulma/css/bulma.css'\nimport CONSTANTS from './constants'\nimport background from './components/background'\nimport snake from './components/snake'\nimport state from './state'\nimport food from './components/food'\n\nconst battleGround = document.getElementById(\"battleGround\")\nconst context = battleGround.getContext(\"2d\")\n\nconst getDirection = (keycode) => {\n\treturn CONSTANTS.KEY_MAP.find(val => val.key === keycode).direction\n}\n\nconst keyPress = (e) => {\n  if (e.keyCode === 32 && !state.game.inProgress) { startGame() }\n  if (state.game.inProgress) {snake.setDirection(getDirection(e.keyCode)) }\n}\n\nbackground.refresh(context, CONSTANTS.BG_COLOR, battleGround)\n\ndocument.addEventListener('keydown', keyPress)\n\nconst startGame = () => {\n  state.game.inProgress = true\n  snake.parts = CONSTANTS.SNAKE_START\n  food.isDropped = false\n  const newGame = setInterval(() => {\n    if( !food.isDropped ) {food.drop(battleGround) }\n    background.refresh(context, CONSTANTS.BG_COLOR, battleGround)\n    food.draw(context, CONSTANTS.FOOD_COLOR)\n    food.wasEaten(snake.isEating(food))\n    snake.move(snake.isEating(food))\n    snake.draw(context, CONSTANTS.SNAKE_COLOR)\n    if( snake.isDead(battleGround) ) {endGame()}\n  }, CONSTANTS.SPEED)\n\n  const endGame = () => {\n    alert('game over')\n    state.game.inProgress = false\n    clearInterval(newGame)\n  }\n}\n\n\n\n"]}