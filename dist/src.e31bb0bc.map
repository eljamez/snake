{"version":3,"sources":["constants.js","components/background.js","components/snake.js","state/index.js","components/food.js","index.js","../node_modules/parcel-bundler/src/builtins/bundle-url.js","../node_modules/parcel-bundler/src/builtins/css-loader.js"],"names":["CONSTANTS","BG_COLOR","SNAKE_COLOR","SNAKE_START","x","y","FOOD_COLOR","SPEED","KEY_MAP","key","direction","background","refresh","context","color","width","height","clearRect","fillStyle","fillRect","snake","init","parts","isOppositeDirection","newDirection","setDirection","move","justAte","unshift","pop","draw","forEach","part","isDead","find","val","index","isEating","currentX","currentY","state","game","inProgress","food","dropped","drop","getRandomPosition","max","Math","round","random","wasEaten","eaten","battleGround","document","getElementById","getContext","getDirection","keycode","keyPress","e","keyCode","startGame","addEventListener","newGame","setInterval","endGame","clearInterval","alert","bundleURL","getBundleURLCached","getBundleURL","Error","err","matches","stack","match","getBaseURL","url","replace","exports","bundle","require","updateLink","link","newLink","cloneNode","onload","remove","href","split","Date","now","parentNode","insertBefore","nextSibling","cssTimeout","reloadCSS","setTimeout","links","querySelectorAll","i","length","module"],"mappings":"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","file":"src.e31bb0bc.map","sourceRoot":"../src","sourcesContent":["const CONSTANTS = {\n  BG_COLOR: 'white',\n  SNAKE_COLOR: 'blue',\n  SNAKE_START: [\n    { x: 30, y: 200 },\n    { x: 20, y: 200 },\n    { x: 10, y: 200 }\n  ],\n  FOOD_COLOR: 'green',\n  SPEED: 100,\n  KEY_MAP: [\n    {key: 37, direction: 'left'},\n    {key: 38, direction: 'up'},\n    {key: 40, direction: 'down'},\n    {key: 39, direction: 'right'}\n  ]\n}\n\nexport default CONSTANTS","const background = {\n  /**\n   * Draws the background\n   * @param {Object} context - the canvas context\n   * @param {String} color - the background color\n   * @param {Object} { width, height } - the size of the canvas\n   */\n  refresh (context, color, { width, height }) {\n    context.clearRect(0, 0, width, height)\n    context.fillStyle = color\n    context.fillRect(0, 0, width, height)\n  }\n}\n\nexport default background","const snake = {\n  /**\n   * Function to initiate the snake\n   * @param {Array} parts - the parts of the snake to set\n   */\n  init (parts) {\n    this.parts = parts\n    this.direction = 'right'\n  },\n\n  /**\n   * Function to check if new direction is opposite current\n   * @param {String} newDirection - the direction to check against\n   * @return {Bool} true if trying to go the opposite direction \n   */\n  isOppositeDirection (newDirection) {\n    switch (newDirection) {\n      case 'up': return this.direction === 'down'\n      case 'down': return this.direction === 'up'\n      case 'right': return this.direction === 'left'\n      case 'left': return this.direction === 'right'\n    }\n  },\n\n  /**\n   * Sets the direction of the snake\n   * @param {String} newDirection \n   */\n  setDirection (newDirection) {\n    if (this.isOppositeDirection(newDirection)) { return false } \n    this.direction = newDirection\n  },\n\n  /**\n   * Moves the snake in the proper direction by adjusting the parts\n   * @param {Bool} justAte - flag to check if the snake just ate, and to add to it's length\n   */\n  move (justAte) {\n    switch (this.direction) {\n      case 'up':\n        this.parts.unshift({\n          x: this.parts[0].x,\n          y: this.parts[0].y - 10\n        })\n        break\n      case 'right':\n        this.parts.unshift({\n          x: this.parts[0].x + 10,\n          y: this.parts[0].y\n        })\n        break\n      case 'down':\n        this.parts.unshift({\n          x: this.parts[0].x,\n          y: this.parts[0].y + 10\n        })\n        break\n      case 'left':\n        this.parts.unshift({\n          x: this.parts[0].x - 10,\n          y: this.parts[0].y\n        })\n      break\n    }\n    \n    if (!justAte) { this.parts.pop() }\n  },\n\n  /**\n   * Draws the snake on the canvas in the proper position\n   * @param {Object} context - the context of the canvas\n   * @param {String} color - the color of the snake\n   */\n  draw (context, color) {\n    context.fillStyle = color\n    this.parts.forEach(part => context.fillRect(part.x, part.y, 10, 10))\n  },\n\n  /**\n   * Checks to see if snake is out of bounds or has hit itself\n   * @param {Object} { width, height } - getting the width and height from the canvas size \n   * @return {Bool} \n   */\n  isDead ({ width, height }) {\n    if (\n      this.parts[0].x >= width ||\n      this.parts[0].y >= height ||\n      this.parts[0].x < 0 ||\n      this.parts[0].y < 0) {\n        return true\n      }\n    return this.parts.find((val, index) => {\n      if (index !== 0) {\n        return val.x === this.parts[0].x && val.y === this.parts[0].y\n      } else {\n        return false\n      }\n    })\n  },\n\n  /**\n   * Checks if snake has found the food and is currently eating\n   * @param {Object} { currentX, currentY } - check if snake is currently eating the food\n   * @return {Bool}\n   */\n  isEating ({ currentX, currentY }) {\n    if (currentX === this.parts[0].x && currentY === this.parts[0].y ) { return true }\n    return false\n  }\n}\n\nexport default snake","const state = {\n  game: {\n    inProgress: false\n  }\n}\n\nexport default state","const food = {\n  /**\n   * food properties\n   * TODO: create init function for setting these props\n   */\n  dropped: false,\n  currentX: 0,\n  currentY: 0,\n\n  /**\n   * function to drop the food\n   * @param {Object} { width, height } - getting the width and height from the canvas size \n   */\n  drop ({ width, height }) {\n    this.currentX = this.getRandomPosition(height)\n    this.currentY = this.getRandomPosition(width)\n    this.dropped = true\n  },\n\n  /**\n   * function to draw the food on frame\n   * @param {Object} context - the canvas context\n   * @param {string} color - the food color\n   */\n  draw (context, color) {\n    context.fillStyle = color\n    context.fillRect(this.currentX, this.currentY, 10, 10)\n  },\n\n  /**\n   * creates a random number\n   * @param {Number} max - the maximum number for random value\n   * @return {Number} a random number for random food placement\n   */\n  getRandomPosition (max) {\n    return Math.round(Math.random() * (max / 10) + 0) * 10\n  },\n\n  /**\n   * function to call when food is eaten\n   * @param {Bool} eaten - if the food was eaten, then it is no longer dropped\n   */\n  wasEaten (eaten) {\n    this.dropped = !eaten\n  }\n}\n\nexport default food","import 'bulma/css/bulma.css'\nimport CONSTANTS from './constants'\nimport background from './components/background'\nimport snake from './components/snake'\nimport state from './state'\nimport food from './components/food'\n\n// TODO: move into init function\n\n/**\n * Set up Canvas\n */\nconst battleGround = document.getElementById(\"battleGround\")\nconst context = battleGround.getContext(\"2d\")\n\n/**\n * get the direction from arrow key map\n * @param {*} keycode \n */\nconst getDirection = (keycode) => {\n\treturn CONSTANTS.KEY_MAP.find(val => val.key === keycode).direction\n}\n\n/**\n * function called on keydown event\n * @param {*} e \n */\nconst keyPress = (e) => {\n  if (e.keyCode === 32 && !state.game.inProgress) { startGame() }\n  if (state.game.inProgress) {snake.setDirection(getDirection(e.keyCode)) }\n}\n\nbackground.refresh(context, CONSTANTS.BG_COLOR, battleGround)\ndocument.addEventListener('keydown', keyPress)\n\n/**\n * Main function to kick off the game\n * TODO: Create module of game controls\n * TODO: Create more consistant reset\n */\nconst startGame = () => {\n  state.game.inProgress = true\n  snake.init(CONSTANTS.SNAKE_START)\n  food.dropped = false\n\n  /**\n   * Sets up a new game / intervals for frames\n   */\n  const newGame = setInterval(() => {\n    if( !food.dropped ) {food.drop(battleGround) }\n    background.refresh(context, CONSTANTS.BG_COLOR, battleGround)\n    food.draw(context, CONSTANTS.FOOD_COLOR)\n    food.wasEaten(snake.isEating(food))\n    snake.move(snake.isEating(food))\n    snake.draw(context, CONSTANTS.SNAKE_COLOR)\n    if( snake.isDead(battleGround) ) {endGame()}\n  }, CONSTANTS.SPEED)\n\n  /**\n   * Initiates the end of the game. \n   */\n  const endGame = () => {\n    clearInterval(newGame)\n    alert('game over')\n    state.game.inProgress = false\n  }\n}\n\n\n\n","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var bundle = require('./bundle-url');\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    link.remove();\n  };\n  newLink.href = link.href.split('?')[0] + '?' + Date.now();\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nmodule.exports = reloadCSS;\n"]}